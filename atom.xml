<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hauger</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-14T14:37:45.639Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hauger</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于Klee的内核测试用例自动生成</title>
    <link href="http://yoursite.com/2020/08/14/klee_linux/"/>
    <id>http://yoursite.com/2020/08/14/klee_linux/</id>
    <published>2020-08-14T14:37:45.639Z</published>
    <updated>2020-08-14T14:37:45.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为单个内核文件生成测试用例"><a href="#为单个内核文件生成测试用例" class="headerlink" title="为单个内核文件生成测试用例"></a>为单个内核文件生成测试用例</h2><p>使用klee的原因是：内核接口存在对单个结构体的校验难以通过。本文主要解决两个问题</p><ol><li>编译内核单个文件</li><li>klee生成测试用例</li></ol><h3 id="编译内核单个文件"><a href="#编译内核单个文件" class="headerlink" title="编译内核单个文件"></a>编译内核单个文件</h3><p>提取clang对单个文件的编译命令，假设我们只关注<code>xfrm_user.c</code>文件的<code>verify_newpolicy_info</code>：</p><ol><li>bear命令提取整个内核的compdb</li><li>修改特定文件cflag</li></ol><p>需要修改/新增的cflag:</p><ol><li><code>-g -c -emit-llvm</code>：生成llvm bitcode</li><li><code>-D__CLANG_STDINT_H=1 </code>, <code>-I /usr/local/include</code>：解决klee和内核头文件冲突</li></ol><p>拷贝<code>xfrm_user.c</code>到<code>xfrm_user_klee.c</code>，并替换编译命令中的目标文件，详情见附录</p><h3 id="klee生成测试用例"><a href="#klee生成测试用例" class="headerlink" title="klee生成测试用例"></a>klee生成测试用例</h3><p>在<code>xfrm_user_klee.c</code>中添加如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;klee/klee.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">xfrm_userpolicy_info</span> <span class="title">info</span>;</span></span><br><span class="line">        klee_make_symbolic(&amp;info, <span class="keyword">sizeof</span>(info), <span class="string">&quot;info&quot;</span>);</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> err = verify_newpolicy_info(&amp;info);</span><br><span class="line">        klee_assume(err == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>运行klee命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">klee -silent-klee-assume --search=random-state xfrm_user.bc</span><br></pre></td></tr></table></figure><p>发现klee无法初始化部分全局变量(这些全局变量存在于.h文件中)，patch注释即可,例如缺少<code>kmalloc_cache</code>和<code>current_task</code>，则注释掉内核如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">include&#x2F;linux&#x2F;slab.h:</span><br><span class="line"></span><br><span class="line">#ifndef CONFIG_SLOB</span><br><span class="line">&#x2F;&#x2F;extern struct kmem_cache *kmalloc_caches[KMALLOC_SHIFT_HIGH + 1];</span><br><span class="line">#ifdef CONFIG_ZONE_DMA</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arch/x86/include/<span class="keyword">asm</span>/current.h</span><br><span class="line"><span class="comment">// DECLARE_PER_CPU(struct task_struct *, current_task);</span></span><br></pre></td></tr></table></figure><p>重新运行上述命令，已经生成通过<code>verify_newpolicy_info</code>校验的testcase:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">xx@PC:~/LinuxKernel/klee-kernel/4.19/linux-4.19.126/bitcode-out/net/xfrm$ ls klee-last</span><br><span class="line">assembly.ll  info  messages.txt  run.istats  run.stats  test000001.ktest  test000002.ktest  test000003.ktest  test000004.ktest  warnings.txt</span><br><span class="line"></span><br><span class="line">xx@PC:~/LinuxKernel/klee-kernel/4.19/linux-4.19.126/bitcode-out/net/xfrm$ ktest-tool klee-last/test000004.ktest </span><br><span class="line">ktest file : <span class="string">&#x27;klee-last/test000004.ktest&#x27;</span></span><br><span class="line">args       : [<span class="string">&#x27;xfrm_user.bc&#x27;</span>]</span><br><span class="line">num objects: 1</span><br><span class="line">object 0: name: <span class="string">&#x27;info&#x27;</span></span><br><span class="line">object 0: size: 168</span><br><span class="line">object 0: data: b<span class="string">&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br><span class="line">object 0: hex : 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f80000000000000000000000</span><br><span class="line">object 0: text: ........................................................................................................................................................................</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="组合多个bc文件"><a href="#组合多个bc文件" class="headerlink" title="组合多个bc文件"></a>组合多个bc文件</h3><p>linux内核中存在<code>EXPORT_SYMBOL</code>，其他模块可以调用它，klee可能无法调用到某些函数，由于我的目标是尽可能的少的改动源码，所以需要更加精细的提取编译命令，构建这些bc</p><h4 id="patch点"><a href="#patch点" class="headerlink" title="patch点"></a>patch点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xx@PC:~/LinuxKernel/klee-kernel/4.19/linux-4.19.126$ vim include/linux/slab.h</span><br><span class="line">xx@PC:~/LinuxKernel/klee-kernel/4.19/linux-4.19.126$ vim include/net/net_namespace.h</span><br><span class="line">xx@PC:~/LinuxKernel/klee-kernel/4.19/linux-4.19.126$ vim include/linux/jiffies.h</span><br><span class="line">xx@PC:~/LinuxKernel/klee-kernel/4.19/linux-4.19.126$ vim include/linux/jiffies.h</span><br><span class="line">xx@PC:~/LinuxKernel/klee-kernel/4.19/linux-4.19.126$ vim include/linux/jiffies.h</span><br><span class="line">xx@PC:~/LinuxKernel/klee-kernel/4.19/linux-4.19.126$ vim include/linux/workqueue.h</span><br><span class="line">xx@PC:~/LinuxKernel/klee-kernel/4.19/linux-4.19.126$ vim include/linux/cred.h</span><br><span class="line">xx@PC:~/LinuxKernel/klee-kernel/4.19/linux-4.19.126$ vim include/linux/audit.h</span><br></pre></td></tr></table></figure><p>出现了很严重的链接问题, 如果不patch上面的extern全局变量，则klee运行时会报无法初始化全局变量，</p><ol><li>如果patch则llvm-link会出现多重定义，</li><li>如果对上述缺失的audit.c和xfrm使用同样的方法过滤，则无法通过编译，</li><li>如果使用wllvm生成的bc, llvm-link链接报<code>-fshort-wchar</code>错误</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llvm-link xfrm_user.bc xfrm_state.bc xfrm_algo.bc -o xfrm.bc</span><br></pre></td></tr></table></figure><p>内核整体的Makefile中包含<code>-fshort-wchar</code>,需要删除这一行，下一节介绍如何正确组合多个bc文件</p><h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;nlohmann/json.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> json = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">ends_with</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span> &amp; value, <span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span> &amp; ending)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ending.size() &gt; value.size()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::equal(ending.rbegin(), ending.rend(), value.rbegin());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::ifstream <span class="title">stream</span><span class="params">(<span class="string">&quot;/home/xx/LinuxKernel/klee-kernel/4.19/linux-4.19.126/compile_commands.json&quot;</span>)</span></span>;</span><br><span class="line">    json dbs = json::parse(stream);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; target=&#123;</span><br><span class="line">            <span class="string">&quot;cpu/common.c&quot;</span>,</span><br><span class="line">            <span class="string">&quot;xfrm/xfrm_user.c&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; depends;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> klee_cmd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; compile : dbs)&#123;</span><br><span class="line">        <span class="keyword">auto</span> &amp; arguments = compile[<span class="string">&quot;arguments&quot;</span>];</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> cmd;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; one_arg : arguments)&#123;</span><br><span class="line">            <span class="keyword">auto</span> arg_str = one_arg.get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;();</span><br><span class="line">            <span class="keyword">if</span>(arg_str.find(<span class="string">&quot;Werror&quot;</span>) != <span class="built_in">std</span>::<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ends_with(arg_str, <span class="string">&quot;.o&quot;</span>))&#123;</span><br><span class="line">                arg_str=arg_str.substr(<span class="number">0</span>, arg_str.find(<span class="string">&quot;.o&quot;</span>))+<span class="string">&quot;.bc &quot;</span>;</span><br><span class="line">                arg_str += <span class="string">&quot;-g -c -emit-llvm&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ends_with(arg_str, <span class="string">&quot;.c&quot;</span>))&#123;</span><br><span class="line">                arg_str = arg_str.substr(<span class="number">0</span>, arg_str.find(<span class="string">&quot;.c&quot;</span>))+<span class="string">&quot;_klee.c &quot;</span>;</span><br><span class="line">                arg_str.insert(<span class="number">0</span>, <span class="string">&quot;-D__CLANG_STDINT_H=1 &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(arg_str.find(<span class="string">&quot;-isystem&quot;</span>) != <span class="built_in">std</span>::<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">                arg_str.insert(<span class="number">0</span>, <span class="string">&quot;-I /usr/local/include &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(arg_str.find(<span class="string">&quot;-O2&quot;</span>) != <span class="built_in">std</span>::<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">                arg_str = <span class="string">&quot;-O0&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(arg_str.find(<span class="string">&quot;-fshort-wchar&quot;</span>) != <span class="built_in">std</span>::<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">                arg_str=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cmd += arg_str + <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cmd &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用klee为Linux内核生成module的测试用例"><a href="#使用klee为Linux内核生成module的测试用例" class="headerlink" title="使用klee为Linux内核生成module的测试用例"></a>使用klee为Linux内核生成module的测试用例</h2><h3 id="构建module"><a href="#构建module" class="headerlink" title="构建module"></a>构建module</h3><p>在上一篇文章中，介绍了给单个源码文件中的函数生成测试用例，但内核中很多函数会调用到其他文件中的函数，比如<code>xfrm_user.c -&gt; xfrm_algo.c -&gt; xfrm_state.c</code>这样的链，所以最好是能将多个相关bc文件合并在一起(尽量确保我们的目标函数是self-contain)。</p><p>解决方法就是通过llvm-link命令，但有一些细节需要处理：</p><ol><li>klee原始版本会强制对所有全局变量进行处理, 包括内核的extern全局变量</li><li>有的全局变量存在于汇编语言中，klee无法处理这样的llvm bitcode</li></ol><h3 id="patch-Klee"><a href="#patch-Klee" class="headerlink" title="patch Klee"></a>patch Klee</h3><p>如果我们仅仅想处理单个文件，直接patch内核中的extern变量为非extern变量,虽然这样工作量也很大；但是如果那样处理，llvm-link无法链接这些bc，会出现变量重定义的错误。</p><p>于是我尝试将缺失的全局变量定义的bc全部加入到llvm-link的链接过程，这时发现有的变量存在于内核汇编语言中，所以这条路走不通。</p><p>又只能回到klee的源码，看看能不能避免加载那些extern的全局变量，直接搜索”unable to load symbol”定位到如下函数，最开始尝试修改源码!addr时continue，但klee运行会崩溃，我注意到了<code>addr = &amp;__dso_handle;</code>这行，如果我自己分配一块内存，让klee以为自己找到了地址呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Executor::initializeGlobals</span><span class="params">(ExecutionState &amp;state)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> *addr;</span><br><span class="line">        <span class="keyword">if</span> (i-&gt;getName() == <span class="string">&quot;__dso_handle&quot;</span>) &#123;</span><br><span class="line">          addr = &amp;__dso_handle; <span class="comment">// </span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          addr = externalDispatcher-&gt;resolveSymbol(i-&gt;getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!addr)</span><br><span class="line">          klee_error(<span class="string">&quot;unable to load symbol(%s) while initializing globals.&quot;</span>, </span><br><span class="line">                     i-&gt;getName().data());</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改成如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i-&gt;getName() == <span class="string">&quot;__dso_handle&quot;</span>) &#123;</span><br><span class="line">  addr = &amp;__dso_handle; <span class="comment">// wtf ?</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  addr = externalDispatcher-&gt;resolveSymbol(i-&gt;getName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!addr)&#123;</span><br><span class="line">  klee_warning(<span class="string">&quot;unable to load symbol(%s) while initializing globals.&quot;</span>,</span><br><span class="line">             i-&gt;getName().data());</span><br><span class="line">  addr=other_pointer;&lt;-------------------新增</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功运行，然后将xfrm_user和其他模块链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llvm-link .&#x2F;xfrm_algo.bc .&#x2F;xfrm_state.bc .&#x2F;extern_klee.bc .&#x2F;xfrm_user.bc -o xfrm.bc</span><br></pre></td></tr></table></figure><h3 id="实现其他模块的函数"><a href="#实现其他模块的函数" class="headerlink" title="实现其他模块的函数"></a>实现其他模块的函数</h3><p>内核内存分配函数和其他模块的函数需要自己实现，否则会影响klee效率，如果需要分配内存，则返回全局变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/timer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/interrupt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/xfrm.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xfrm_state</span> <span class="title">state</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">kmem_cache_alloc</span><span class="params">(struct kmem_cache * cache, <span class="keyword">gfp_t</span> flags)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tasklet_hrtimer_init</span><span class="params">(struct tasklet_hrtimer *ttimer,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">enum</span> hrtimer_restart (*function)(struct hrtimer *),</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">clockid_t</span> which_clock, <span class="keyword">enum</span> hrtimer_mode mode)</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_timer_key</span><span class="params">(struct timer_list *timer,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">void</span> (*func)(struct timer_list *), <span class="keyword">unsigned</span> <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">const</span> <span class="keyword">char</span> *name, struct lock_class_key *key)</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">time64_t</span> <span class="title">ktime_get_real_seconds</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">crypto_has_alg</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, u32 type, u32 mask)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> buf_idx=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">0x10000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">kmemdup</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *src, <span class="keyword">size_t</span> len, <span class="keyword">gfp_t</span> gfp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">void</span>* ret=buf+buf_idx;</span><br><span class="line">        <span class="built_in">memcpy</span>(ret, src, len);</span><br><span class="line">        buf_idx+=len;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试module"><a href="#测试module" class="headerlink" title="测试module"></a>测试module</h3><p>xfrm模块对netlink的attr做了非常多校验，下面是构造netlink attr，并调用klee相关函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">nlattr</span> *<span class="title">attrs</span>[<span class="title">XFRMA_MAX</span>];</span></span><br><span class="line">        <span class="built_in">memset</span>(attrs, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">void</span>*) * XFRMA_MAX);</span><br><span class="line">        <span class="keyword">uint8_t</span>* ptr = global_buffer;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">net</span> <span class="title">net_local</span>;</span></span><br><span class="line">        <span class="built_in">memset</span>(&amp;net_local, <span class="number">0</span>, <span class="keyword">sizeof</span>(net_local));</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">xfrm_usersa_info</span> <span class="title">info</span>;</span></span><br><span class="line">        <span class="keyword">uint8_t</span> has[XFRMA_MAX];</span><br><span class="line">        klee_make_symbolic(global_buffer, <span class="number">10000</span> , <span class="string">&quot;global_buffer&quot;</span>);</span><br><span class="line">        klee_make_symbolic(&amp;info, <span class="keyword">sizeof</span>(info) , <span class="string">&quot;info&quot;</span>);</span><br><span class="line">        klee_make_symbolic(has, XFRMA_MAX , <span class="string">&quot;has&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">uint16_t</span> item_size = <span class="number">200</span> - <span class="keyword">sizeof</span>(struct nlattr);</span><br><span class="line">        <span class="comment">//不要给attr指针数组的每一项都赋值，因为存在冲突，应该假定不知道哪些attr需要赋值，</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;XFRMA_MAX;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(has[i])&#123;</span><br><span class="line">                        attrs[i]=(struct nlattr*)(ptr);</span><br><span class="line">                        ((struct nlattr*)(ptr))-&gt;nla_len = item_size;</span><br><span class="line">                        ptr += <span class="number">200</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        klee_assume(verify_newsa_info(&amp;info, attrs) == <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> err=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//klee_assume(err == 0);</span></span><br><span class="line">        klee_assume(xfrm_state_construct(&amp;net_local, &amp;info, attrs, &amp;err));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构建完整的klee"><a href="#构建完整的klee" class="headerlink" title="构建完整的klee"></a>构建完整的klee</h2><p>如果不使用klee提供的uclibc，则无法使用strcmp，所以需要构建完整的klee</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake ..  -DENABLE_POSIX_RUNTIME=ON -DENABLE_KLEE_UCLIBC=ON -DKLEE_UCLIBC_PATH=/usr/x86_64-linux-uclibc/usr</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">klee  --libc=uclibc --posix-runtime -silent-klee-assume --search=dfs ./xfrm.bc</span><br></pre></td></tr></table></figure><p>构建external</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang-10 -c -Wp,-MD,net/xfrm/.xfrm_user.o.d -nostdinc -I /usr/<span class="built_in">local</span>/include -isystem /usr/lib/llvm-10/lib/clang/10.0.0/include -I../arch/x86/include -I./arch/x86/include/generated -I../include -I./include -I../arch/x86/include/uapi -I./arch/x86/include/generated/uapi -I../include/uapi -I./include/generated/uapi -include ../include/linux/kconfig.h -include ../include/linux/compiler_types.h -I../net/xfrm -Inet/xfrm -D__KERNEL__ -Qunused-arguments -Wall -Wundef -Wstrict-prototypes -Wno-trigraphs -fno-strict-aliasing -fno-common  -Wno-format-security -std=gnu89 -no-integrated-as -fno-PIE -mno-sse -mno-mmx -mno-sse2 -mno-3dnow -mno-avx -m64 -mno-80387 -mstack-alignment=8 -mtune=generic -mno-red-zone -mcmodel=kernel -funit-at<span class="_">-a</span>-time -DCONFIG_AS_CFI=1 -DCONFIG_AS_CFI_SIGNAL_FRAME=1 -DCONFIG_AS_CFI_SECTIONS=1 -DCONFIG_AS_FXSAVEQ=1 -DCONFIG_AS_SSSE3=1 -DCONFIG_AS_CRC32=1 -DCONFIG_AS_AVX=1 -DCONFIG_AS_AVX2=1 -DCONFIG_AS_AVX512=1 -DCONFIG_AS_SHA1_NI=1 -DCONFIG_AS_SHA256_NI=1 -pipe -Wno-sign-compare -fno-asynchronous-unwind-tables -mretpoline-external-thunk -fno-delete-null-pointer-checks -Wno-int-in-bool-context -Wno-address-of-packed-member -O0 -Wframe-larger-than=2048 -fstack-protector-strong -Wno-format-invalid-specifier -Wno-gnu -Wno-tautological-compare -mno-global-merge -Wno-unused-const-variable -fomit-frame-pointer -Wdeclaration-after-statement -Wno-pointer-sign -Wno-array-bounds -fno-strict-overflow -fno-merge-all-constants -fno-stack-check -fmacro-prefix-map=../= -fcf-protection=none -Wno-initializer-overrides -Wno-unused-value -Wno-format -Wno-sign-compare -Wno-format-zero-length -Wno-uninitialized -DKBUILD_BASENAME=<span class="string">&quot;xfrm_user&quot;</span> -DKBUILD_MODNAME=<span class="string">&quot;\&quot;xfrm_user\&quot;&quot;</span> -o net/xfrm/extern_klee.bc -g -c -emit-llvm -D__CLANG_STDINT_H=1 ../net/xfrm/extern_klee.c</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为单个内核文件生成测试用例&quot;&gt;&lt;a href=&quot;#为单个内核文件生成测试用例&quot; class=&quot;headerlink&quot; title=&quot;为单个内核文件生成测试用例&quot;&gt;&lt;/a&gt;为单个内核文件生成测试用例&lt;/h2&gt;&lt;p&gt;使用klee的原因是：内核接口存在对单个结构体的校验</summary>
      
    
    
    
    
  </entry>
  
</feed>
